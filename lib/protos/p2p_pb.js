'use strict';

/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var core_pb = require('./core_pb.js');
goog.object.extend(proto, core_pb);
goog.exportSymbol('proto.bc.BcBlocks', null, global);
goog.exportSymbol('proto.bc.Config', null, global);
goog.exportSymbol('proto.bc.InitialPeer', null, global);
goog.exportSymbol('proto.bc.InitialPeerEvents', null, global);
goog.exportSymbol('proto.bc.PutConfig', null, global);
goog.exportSymbol('proto.bc.PutService', null, global);
goog.exportSymbol('proto.bc.Record', null, global);
goog.exportSymbol('proto.bc.Service', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.InitialPeer = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.InitialPeer, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.InitialPeer.displayName = 'proto.bc.InitialPeer';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bc.InitialPeer.prototype.toObject = function (opt_includeInstance) {
    return proto.bc.InitialPeer.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bc.InitialPeer} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bc.InitialPeer.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      address: jspb.Message.getFieldWithDefault(msg, 1, ""),
      expires: jspb.Message.getFieldWithDefault(msg, 2, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.InitialPeer}
 */
proto.bc.InitialPeer.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.InitialPeer();
  return proto.bc.InitialPeer.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.InitialPeer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.InitialPeer}
 */
proto.bc.InitialPeer.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */reader.readString();
        msg.setAddress(value);
        break;
      case 2:
        var value = /** @type {number} */reader.readUint64();
        msg.setExpires(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.InitialPeer.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.bc.InitialPeer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.InitialPeer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.InitialPeer.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getExpires();
  if (f !== 0) {
    writer.writeUint64(2, f);
  }
};

/**
 * optional string address = 1;
 * @return {string}
 */
proto.bc.InitialPeer.prototype.getAddress = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 1, "")
  );
};

/** @param {string} value */
proto.bc.InitialPeer.prototype.setAddress = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional uint64 expires = 2;
 * @return {number}
 */
proto.bc.InitialPeer.prototype.getExpires = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};

/** @param {number} value */
proto.bc.InitialPeer.prototype.setExpires = function (value) {
  jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.InitialPeerEvents = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.InitialPeerEvents, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.InitialPeerEvents.displayName = 'proto.bc.InitialPeerEvents';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bc.InitialPeerEvents.prototype.toObject = function (opt_includeInstance) {
    return proto.bc.InitialPeerEvents.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bc.InitialPeerEvents} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bc.InitialPeerEvents.toObject = function (includeInstance, msg) {
    var f,
        obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.InitialPeerEvents}
 */
proto.bc.InitialPeerEvents.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.InitialPeerEvents();
  return proto.bc.InitialPeerEvents.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.InitialPeerEvents} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.InitialPeerEvents}
 */
proto.bc.InitialPeerEvents.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.InitialPeerEvents.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.bc.InitialPeerEvents.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.InitialPeerEvents} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.InitialPeerEvents.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.BcBlocks = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.BcBlocks.repeatedFields_, null);
};
goog.inherits(proto.bc.BcBlocks, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.BcBlocks.displayName = 'proto.bc.BcBlocks';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.BcBlocks.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bc.BcBlocks.prototype.toObject = function (opt_includeInstance) {
    return proto.bc.BcBlocks.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bc.BcBlocks} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bc.BcBlocks.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      blocksList: jspb.Message.toObjectList(msg.getBlocksList(), core_pb.BcBlock.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.BcBlocks}
 */
proto.bc.BcBlocks.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.BcBlocks();
  return proto.bc.BcBlocks.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.BcBlocks} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.BcBlocks}
 */
proto.bc.BcBlocks.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new core_pb.BcBlock();
        reader.readMessage(value, core_pb.BcBlock.deserializeBinaryFromReader);
        msg.addBlocks(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.BcBlocks.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.bc.BcBlocks.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.BcBlocks} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.BcBlocks.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getBlocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(1, f, core_pb.BcBlock.serializeBinaryToWriter);
  }
};

/**
 * repeated BcBlock blocks = 1;
 * @return {!Array<!proto.bc.BcBlock>}
 */
proto.bc.BcBlocks.prototype.getBlocksList = function () {
  return (/** @type{!Array<!proto.bc.BcBlock>} */jspb.Message.getRepeatedWrapperField(this, core_pb.BcBlock, 1)
  );
};

/** @param {!Array<!proto.bc.BcBlock>} value */
proto.bc.BcBlocks.prototype.setBlocksList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.bc.BcBlock=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.BcBlock}
 */
proto.bc.BcBlocks.prototype.addBlocks = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.bc.BcBlock, opt_index);
};

proto.bc.BcBlocks.prototype.clearBlocksList = function () {
  this.setBlocksList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.Service = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.Service, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.Service.displayName = 'proto.bc.Service';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bc.Service.prototype.toObject = function (opt_includeInstance) {
    return proto.bc.Service.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bc.Service} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bc.Service.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      version: jspb.Message.getFieldWithDefault(msg, 1, 0),
      uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
      pid: jspb.Message.getFieldWithDefault(msg, 3, ""),
      text: jspb.Message.getFieldWithDefault(msg, 4, ""),
      data: jspb.Message.getFieldWithDefault(msg, 5, "")
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.Service}
 */
proto.bc.Service.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.Service();
  return proto.bc.Service.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.Service} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.Service}
 */
proto.bc.Service.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */reader.readUint64();
        msg.setVersion(value);
        break;
      case 2:
        var value = /** @type {string} */reader.readString();
        msg.setUuid(value);
        break;
      case 3:
        var value = /** @type {string} */reader.readString();
        msg.setPid(value);
        break;
      case 4:
        var value = /** @type {string} */reader.readString();
        msg.setText(value);
        break;
      case 5:
        var value = /** @type {string} */reader.readString();
        msg.setData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.Service.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.bc.Service.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.Service} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.Service.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getPid();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
};

/**
 * optional uint64 version = 1;
 * @return {number}
 */
proto.bc.Service.prototype.getVersion = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};

/** @param {number} value */
proto.bc.Service.prototype.setVersion = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.bc.Service.prototype.getUuid = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 2, "")
  );
};

/** @param {string} value */
proto.bc.Service.prototype.setUuid = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string pid = 3;
 * @return {string}
 */
proto.bc.Service.prototype.getPid = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 3, "")
  );
};

/** @param {string} value */
proto.bc.Service.prototype.setPid = function (value) {
  jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string text = 4;
 * @return {string}
 */
proto.bc.Service.prototype.getText = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 4, "")
  );
};

/** @param {string} value */
proto.bc.Service.prototype.setText = function (value) {
  jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string data = 5;
 * @return {string}
 */
proto.bc.Service.prototype.getData = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 5, "")
  );
};

/** @param {string} value */
proto.bc.Service.prototype.setData = function (value) {
  jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.PutService = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.PutService, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.PutService.displayName = 'proto.bc.PutService';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bc.PutService.prototype.toObject = function (opt_includeInstance) {
    return proto.bc.PutService.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bc.PutService} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bc.PutService.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      version: jspb.Message.getFieldWithDefault(msg, 1, 0),
      uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
      pid: jspb.Message.getFieldWithDefault(msg, 3, ""),
      encrypted: jspb.Message.getFieldWithDefault(msg, 4, false),
      text: jspb.Message.getFieldWithDefault(msg, 5, ""),
      data: msg.getData_asB64()
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.PutService}
 */
proto.bc.PutService.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.PutService();
  return proto.bc.PutService.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.PutService} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.PutService}
 */
proto.bc.PutService.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */reader.readUint64();
        msg.setVersion(value);
        break;
      case 2:
        var value = /** @type {string} */reader.readString();
        msg.setUuid(value);
        break;
      case 3:
        var value = /** @type {string} */reader.readString();
        msg.setPid(value);
        break;
      case 4:
        var value = /** @type {boolean} */reader.readBool();
        msg.setEncrypted(value);
        break;
      case 5:
        var value = /** @type {string} */reader.readString();
        msg.setText(value);
        break;
      case 6:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.PutService.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.bc.PutService.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.PutService} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.PutService.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getPid();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getEncrypted();
  if (f) {
    writer.writeBool(4, f);
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(6, f);
  }
};

/**
 * optional uint64 version = 1;
 * @return {number}
 */
proto.bc.PutService.prototype.getVersion = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};

/** @param {number} value */
proto.bc.PutService.prototype.setVersion = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.bc.PutService.prototype.getUuid = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 2, "")
  );
};

/** @param {string} value */
proto.bc.PutService.prototype.setUuid = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string pid = 3;
 * @return {string}
 */
proto.bc.PutService.prototype.getPid = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 3, "")
  );
};

/** @param {string} value */
proto.bc.PutService.prototype.setPid = function (value) {
  jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional bool encrypted = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bc.PutService.prototype.getEncrypted = function () {
  return (/** @type {boolean} */jspb.Message.getFieldWithDefault(this, 4, false)
  );
};

/** @param {boolean} value */
proto.bc.PutService.prototype.setEncrypted = function (value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};

/**
 * optional string text = 5;
 * @return {string}
 */
proto.bc.PutService.prototype.getText = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 5, "")
  );
};

/** @param {string} value */
proto.bc.PutService.prototype.setText = function (value) {
  jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * optional bytes data = 6;
 * @return {!(string|Uint8Array)}
 */
proto.bc.PutService.prototype.getData = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 6, "")
  );
};

/**
 * optional bytes data = 6;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.bc.PutService.prototype.getData_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getData())
  );
};

/**
 * optional bytes data = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.bc.PutService.prototype.getData_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getData())
  );
};

/** @param {!(string|Uint8Array)} value */
proto.bc.PutService.prototype.setData = function (value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.Record = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.Record, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.Record.displayName = 'proto.bc.Record';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bc.Record.prototype.toObject = function (opt_includeInstance) {
    return proto.bc.Record.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bc.Record} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bc.Record.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      version: jspb.Message.getFieldWithDefault(msg, 1, 0),
      host: jspb.Message.getFieldWithDefault(msg, 2, ""),
      port: jspb.Message.getFieldWithDefault(msg, 3, 0),
      lastSeen: jspb.Message.getFieldWithDefault(msg, 4, 0),
      lastSeenHash: jspb.Message.getFieldWithDefault(msg, 5, "")
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.Record}
 */
proto.bc.Record.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.Record();
  return proto.bc.Record.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.Record} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.Record}
 */
proto.bc.Record.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */reader.readUint64();
        msg.setVersion(value);
        break;
      case 2:
        var value = /** @type {string} */reader.readString();
        msg.setHost(value);
        break;
      case 3:
        var value = /** @type {number} */reader.readUint64();
        msg.setPort(value);
        break;
      case 4:
        var value = /** @type {number} */reader.readUint64();
        msg.setLastSeen(value);
        break;
      case 5:
        var value = /** @type {string} */reader.readString();
        msg.setLastSeenHash(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.Record.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.bc.Record.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.Record} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.Record.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint64(3, f);
  }
  f = message.getLastSeen();
  if (f !== 0) {
    writer.writeUint64(4, f);
  }
  f = message.getLastSeenHash();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
};

/**
 * optional uint64 version = 1;
 * @return {number}
 */
proto.bc.Record.prototype.getVersion = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};

/** @param {number} value */
proto.bc.Record.prototype.setVersion = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional string host = 2;
 * @return {string}
 */
proto.bc.Record.prototype.getHost = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 2, "")
  );
};

/** @param {string} value */
proto.bc.Record.prototype.setHost = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional uint64 port = 3;
 * @return {number}
 */
proto.bc.Record.prototype.getPort = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};

/** @param {number} value */
proto.bc.Record.prototype.setPort = function (value) {
  jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional uint64 last_seen = 4;
 * @return {number}
 */
proto.bc.Record.prototype.getLastSeen = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 4, 0)
  );
};

/** @param {number} value */
proto.bc.Record.prototype.setLastSeen = function (value) {
  jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional string last_seen_hash = 5;
 * @return {string}
 */
proto.bc.Record.prototype.getLastSeenHash = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 5, "")
  );
};

/** @param {string} value */
proto.bc.Record.prototype.setLastSeenHash = function (value) {
  jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.Config = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.Config.repeatedFields_, null);
};
goog.inherits(proto.bc.Config, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.Config.displayName = 'proto.bc.Config';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.Config.repeatedFields_ = [4];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bc.Config.prototype.toObject = function (opt_includeInstance) {
    return proto.bc.Config.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bc.Config} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bc.Config.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      version: jspb.Message.getFieldWithDefault(msg, 1, 0),
      secureAdmin: jspb.Message.getFieldWithDefault(msg, 2, ""),
      secureGroup: jspb.Message.getFieldWithDefault(msg, 3, ""),
      servicesList: jspb.Message.toObjectList(msg.getServicesList(), proto.bc.Service.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.Config}
 */
proto.bc.Config.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.Config();
  return proto.bc.Config.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.Config}
 */
proto.bc.Config.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */reader.readUint64();
        msg.setVersion(value);
        break;
      case 2:
        var value = /** @type {string} */reader.readString();
        msg.setSecureAdmin(value);
        break;
      case 3:
        var value = /** @type {string} */reader.readString();
        msg.setSecureGroup(value);
        break;
      case 4:
        var value = new proto.bc.Service();
        reader.readMessage(value, proto.bc.Service.deserializeBinaryFromReader);
        msg.addServices(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.Config.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.bc.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.Config.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getSecureAdmin();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getSecureGroup();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getServicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(4, f, proto.bc.Service.serializeBinaryToWriter);
  }
};

/**
 * optional uint64 version = 1;
 * @return {number}
 */
proto.bc.Config.prototype.getVersion = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};

/** @param {number} value */
proto.bc.Config.prototype.setVersion = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional string secure_admin = 2;
 * @return {string}
 */
proto.bc.Config.prototype.getSecureAdmin = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 2, "")
  );
};

/** @param {string} value */
proto.bc.Config.prototype.setSecureAdmin = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string secure_group = 3;
 * @return {string}
 */
proto.bc.Config.prototype.getSecureGroup = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 3, "")
  );
};

/** @param {string} value */
proto.bc.Config.prototype.setSecureGroup = function (value) {
  jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * repeated Service services = 4;
 * @return {!Array<!proto.bc.Service>}
 */
proto.bc.Config.prototype.getServicesList = function () {
  return (/** @type{!Array<!proto.bc.Service>} */jspb.Message.getRepeatedWrapperField(this, proto.bc.Service, 4)
  );
};

/** @param {!Array<!proto.bc.Service>} value */
proto.bc.Config.prototype.setServicesList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};

/**
 * @param {!proto.bc.Service=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.Service}
 */
proto.bc.Config.prototype.addServices = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.bc.Service, opt_index);
};

proto.bc.Config.prototype.clearServicesList = function () {
  this.setServicesList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.PutConfig = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.PutConfig.repeatedFields_, null);
};
goog.inherits(proto.bc.PutConfig, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  proto.bc.PutConfig.displayName = 'proto.bc.PutConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.PutConfig.repeatedFields_ = [4];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.bc.PutConfig.prototype.toObject = function (opt_includeInstance) {
    return proto.bc.PutConfig.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.bc.PutConfig} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.bc.PutConfig.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      version: jspb.Message.getFieldWithDefault(msg, 1, 0),
      admin: jspb.Message.getFieldWithDefault(msg, 2, false),
      secureSignature: jspb.Message.getFieldWithDefault(msg, 3, ""),
      servicesList: jspb.Message.toObjectList(msg.getServicesList(), proto.bc.PutService.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.PutConfig}
 */
proto.bc.PutConfig.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.PutConfig();
  return proto.bc.PutConfig.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.PutConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.PutConfig}
 */
proto.bc.PutConfig.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */reader.readUint64();
        msg.setVersion(value);
        break;
      case 2:
        var value = /** @type {boolean} */reader.readBool();
        msg.setAdmin(value);
        break;
      case 3:
        var value = /** @type {string} */reader.readString();
        msg.setSecureSignature(value);
        break;
      case 4:
        var value = new proto.bc.PutService();
        reader.readMessage(value, proto.bc.PutService.deserializeBinaryFromReader);
        msg.addServices(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.PutConfig.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.bc.PutConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.PutConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.PutConfig.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint64(1, f);
  }
  f = message.getAdmin();
  if (f) {
    writer.writeBool(2, f);
  }
  f = message.getSecureSignature();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getServicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(4, f, proto.bc.PutService.serializeBinaryToWriter);
  }
};

/**
 * optional uint64 version = 1;
 * @return {number}
 */
proto.bc.PutConfig.prototype.getVersion = function () {
  return (/** @type {number} */jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};

/** @param {number} value */
proto.bc.PutConfig.prototype.setVersion = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional bool admin = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.bc.PutConfig.prototype.getAdmin = function () {
  return (/** @type {boolean} */jspb.Message.getFieldWithDefault(this, 2, false)
  );
};

/** @param {boolean} value */
proto.bc.PutConfig.prototype.setAdmin = function (value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};

/**
 * optional string secure_signature = 3;
 * @return {string}
 */
proto.bc.PutConfig.prototype.getSecureSignature = function () {
  return (/** @type {string} */jspb.Message.getFieldWithDefault(this, 3, "")
  );
};

/** @param {string} value */
proto.bc.PutConfig.prototype.setSecureSignature = function (value) {
  jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * repeated PutService services = 4;
 * @return {!Array<!proto.bc.PutService>}
 */
proto.bc.PutConfig.prototype.getServicesList = function () {
  return (/** @type{!Array<!proto.bc.PutService>} */jspb.Message.getRepeatedWrapperField(this, proto.bc.PutService, 4)
  );
};

/** @param {!Array<!proto.bc.PutService>} value */
proto.bc.PutConfig.prototype.setServicesList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};

/**
 * @param {!proto.bc.PutService=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.PutService}
 */
proto.bc.PutConfig.prototype.addServices = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.bc.PutService, opt_index);
};

proto.bc.PutConfig.prototype.clearServicesList = function () {
  this.setServicesList([]);
};

goog.object.extend(exports, proto.bc);